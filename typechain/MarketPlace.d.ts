/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    PayableOverrides,
    CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface MarketPlaceInterface extends ethers.utils.Interface {
    functions: {
        'createMarketItem(address,uint256,uint256)': FunctionFragment;
        'createMarketSale(address,uint256)': FunctionFragment;
        'fetchMarketItems()': FunctionFragment;
        'owner()': FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: 'createMarketItem',
        values: [string, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: 'createMarketSale',
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: 'fetchMarketItems',
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string;

    decodeFunctionResult(
        functionFragment: 'createMarketItem',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'createMarketSale',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'fetchMarketItems',
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;

    events: {
        'MarketItemCreated(uint256,address,uint256,address,address,uint256,bool)': EventFragment;
        'MarketItemSold(uint256,address)': EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: 'MarketItemCreated'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'MarketItemSold'): EventFragment;
}

export type MarketItemCreatedEvent = TypedEvent<
    [BigNumber, string, BigNumber, string, string, BigNumber, boolean] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
        sold: boolean;
    }
>;

export type MarketItemSoldEvent = TypedEvent<
    [BigNumber, string] & { itemId: BigNumber; owner: string }
>;

export class MarketPlace extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: MarketPlaceInterface;

    functions: {
        createMarketItem(
            nftContract: string,
            tokenId: BigNumberish,
            price: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        createMarketSale(
            nftContract: string,
            itemId: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        fetchMarketItems(overrides?: CallOverrides): Promise<
            [
                ([
                    BigNumber,
                    string,
                    BigNumber,
                    string,
                    string,
                    BigNumber,
                    boolean
                ] & {
                    itemId: BigNumber;
                    nftContract: string;
                    tokenId: BigNumber;
                    seller: string;
                    owner: string;
                    price: BigNumber;
                    sold: boolean;
                })[]
            ]
        >;

        owner(overrides?: CallOverrides): Promise<[string]>;
    };

    createMarketItem(
        nftContract: string,
        tokenId: BigNumberish,
        price: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarketSale(
        nftContract: string,
        itemId: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchMarketItems(overrides?: CallOverrides): Promise<
        ([BigNumber, string, BigNumber, string, string, BigNumber, boolean] & {
            itemId: BigNumber;
            nftContract: string;
            tokenId: BigNumber;
            seller: string;
            owner: string;
            price: BigNumber;
            sold: boolean;
        })[]
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        createMarketItem(
            nftContract: string,
            tokenId: BigNumberish,
            price: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        createMarketSale(
            nftContract: string,
            itemId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        fetchMarketItems(overrides?: CallOverrides): Promise<
            ([
                BigNumber,
                string,
                BigNumber,
                string,
                string,
                BigNumber,
                boolean
            ] & {
                itemId: BigNumber;
                nftContract: string;
                tokenId: BigNumber;
                seller: string;
                owner: string;
                price: BigNumber;
                sold: boolean;
            })[]
        >;

        owner(overrides?: CallOverrides): Promise<string>;
    };

    filters: {
        'MarketItemCreated(uint256,address,uint256,address,address,uint256,bool)'(
            itemId?: BigNumberish | null,
            nftContract?: string | null,
            tokenId?: BigNumberish | null,
            seller?: null,
            owner?: null,
            price?: null,
            sold?: null
        ): TypedEventFilter<
            [BigNumber, string, BigNumber, string, string, BigNumber, boolean],
            {
                itemId: BigNumber;
                nftContract: string;
                tokenId: BigNumber;
                seller: string;
                owner: string;
                price: BigNumber;
                sold: boolean;
            }
        >;

        MarketItemCreated(
            itemId?: BigNumberish | null,
            nftContract?: string | null,
            tokenId?: BigNumberish | null,
            seller?: null,
            owner?: null,
            price?: null,
            sold?: null
        ): TypedEventFilter<
            [BigNumber, string, BigNumber, string, string, BigNumber, boolean],
            {
                itemId: BigNumber;
                nftContract: string;
                tokenId: BigNumber;
                seller: string;
                owner: string;
                price: BigNumber;
                sold: boolean;
            }
        >;

        'MarketItemSold(uint256,address)'(
            itemId?: BigNumberish | null,
            owner?: null
        ): TypedEventFilter<
            [BigNumber, string],
            { itemId: BigNumber; owner: string }
        >;

        MarketItemSold(
            itemId?: BigNumberish | null,
            owner?: null
        ): TypedEventFilter<
            [BigNumber, string],
            { itemId: BigNumber; owner: string }
        >;
    };

    estimateGas: {
        createMarketItem(
            nftContract: string,
            tokenId: BigNumberish,
            price: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        createMarketSale(
            nftContract: string,
            itemId: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        fetchMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        createMarketItem(
            nftContract: string,
            tokenId: BigNumberish,
            price: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        createMarketSale(
            nftContract: string,
            itemId: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        fetchMarketItems(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
